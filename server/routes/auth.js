const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');
const crypto = require('crypto');
const nodemailer = require('nodemailer');
const resetTokens = {}; // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ö—Ä–∞–Ω–∏ –≤ MongoDB —Å expiry
const { User } = require('../models/user');

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.post('/register', async (req, res) => {
    const { firstName, lastName, username, email, password } = req.body;

    if (!firstName || !lastName || !username || !email || !password) {
        return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –∏–ª–∏ email
        const existingUsername = await User.findOne({ username });
        if (existingUsername) {
            return res.status(409).json({ message: 'Username —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' });
        }

        const existingEmail = await User.findOne({ email });
        if (existingEmail) {
            return res.status(409).json({ message: 'Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è' });
        }

        // –•—ç—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const hashedPassword = await bcrypt.hash(password, 10);
        const ip = req.headers['x-forwarded-for']?.split(',').shift() || req.socket.remoteAddress;

        // –°–æ–∑–¥–∞—ë–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
        const newUser = new User({
            firstName,
            lastName,
            username,
            email,
            password: hashedPassword,
            ip 
        });

        newUser.ip = ip;
        await newUser.save();
        res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', userId: newUser.userId });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// API –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
router.post('/login', async (req, res) => {
    const { usernameOrEmail, password } = req.body;

    if (!usernameOrEmail || !password) {
        return res.status(400).json({ message: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è' });
    }

    try {
        const user = await User.findOne({
            $or: [{ username: usernameOrEmail }, { email: usernameOrEmail }]
        });

        if (!user) {
            return res.status(401).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) {
            return res.status(401).json({ message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å' });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–µ—Å—Å–∏–∏
        req.session.userId = user.userId;
        req.session.username = user.username;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º IP –ø—Ä–∏ –≤—Ö–æ–¥–µ
        const ip = req.headers['x-forwarded-for']?.split(',').shift() || req.socket.remoteAddress;
        await User.updateOne({ userId: user.userId }, { ip });

        res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥', userId: user.userId, username: user.username });

    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', err);
        res.status(500).json({ message: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
router.post('/logout', (req, res) => {
    req.session.destroy(err => {
        if (err) {
            return res.status(500).json({ message: '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞' });
        }
        res.clearCookie('connect.sid'); // –û—á–∏—Å—Ç–∫–∞ cookie —Å–µ—Å—Å–∏–∏
        res.json({ message: '–í—ã—Ö–æ–¥ —É—Å–ø–µ—à–µ–Ω' });
    });
});

// –°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, —Å–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞ –ø–æ—á—Ç—É
router.post('/request-reset', async (req, res) => {
    const { email } = req.body;

    const user = await User.findOne({ email });
    if (!user) return res.status(200).json({ message: '–ï—Å–ª–∏ —Ç–∞–∫–æ–π email –µ—Å—Ç—å, –æ—Ç–ø—Ä–∞–≤–∏–º —Å—Å—ã–ª–∫—É' });

    const token = crypto.randomBytes(32).toString('hex');
    resetTokens[token] = { userId: user.userId, expires: Date.now() + 1000 * 60 * 30 }; // 30 –º–∏–Ω

    const resetLink = `https://vstudio-betatest-production.up.railway.app/reset-password.html?token=${token}`;

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω–æ–º –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
    const transporter = nodemailer.createTransport({
        service: 'gmail',
        auth: {
            user: process.env.EMAIL_FROM,
            pass: process.env.EMAIL_PASS
        }
    });

    await transporter.sendMail({
        from: process.env.EMAIL_FROM,
        to: email,
        subject: 'Reset your password',
        html: `
    <div style="font-family: Arial, sans-serif; padding: 20px; background: #f9f9f9; color: #333;">
      <div style="max-width: 600px; margin: auto; background: #fff; border-radius: 10px; padding: 30px; box-shadow: 0 0 10px rgba(0,0,0,0.05);">
        <h2 style="color: #333;">üîê <strong>Password reset</strong></h2>
        
        <p style="margin-top: 20px;">
          You receive this e-mail because you have requested the reinitialization of your account password at the Database of ValeyevStudio.
        </p>

        <p>This link will be valid for <strong>30 min</strong>. If the link expires before you have been able to reinitialize your password, you can request a new link using the password recovery form.</p>

        <p>If you did not request a password reset, you can safely ignore this message.</p>

        <p style="margin-top: 30px;">Please click the button below to reset your password:</p>

        <div style="text-align: center; margin: 30px 0;">
          <a href="${resetLink}" style="display: inline-block; background-color: #1a73e8; color: #fff; padding: 12px 25px; text-decoration: none; border-radius: 8px; font-weight: bold;">
            Reset Password
          </a>
        </div>

        <p>If you have any questions, please contact customer support: <a href="mailto:support@valeyevstudio.com">support@valeyevstudio.com</a></p>

        <p style="margin-top: 40px;">
          <strong>The ValeyevStudio team</strong><br />
          <em>be unique with your music!</em>
        </p>
      </div>
    </div>
  `
    });
    res.json({ message: '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –µ—Å–ª–∏ email —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É
router.post('/reset-password', async (req, res) => {
    const { token, newPassword } = req.body;

    const data = resetTokens[token];
    if (!data || Date.now() > data.expires) {
        return res.status(400).json({ message: '–°—Å—ã–ª–∫–∞ –∏—Å—Ç–µ–∫–ª–∞ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    const user = await User.findOne({ userId: data.userId });
    if (!user) {
        return res.status(400).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —Å —Ç–µ–∫—É—â–∏–º
    const isSamePassword = await bcrypt.compare(newPassword, user.password);
    if (isSamePassword) {
        return res.status(400).json({ message: '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º' });
    }

    // –•—ç—à–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await User.updateOne({ userId: data.userId }, { password: hashedPassword });

    delete resetTokens[token]; // –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω

    res.json({ message: '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω' });
});

module.exports = router;